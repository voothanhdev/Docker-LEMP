#!/bin/bash
########################################################################################################################
### DEFAULT VALUES #####################################################################################################
########################################################################################################################
SERVER_NAME_DEFAULT=localhost
VARNISH_BE_PORT=8080
VARNISH_PORT=6081
FOLDER=
PROJECT_TYPE=
VARNISH=
SERVER_NAME=
HTTPS=true
PROXY=
PROXY_PORT=
MAGENTO_INCLUDE="include /etc/nginx/include/magento.conf;"

########################################################################################################################
### OPTION CHOICE VALUES ###############################################################################################
########################################################################################################################
PROJECT_TYPE_PHP=1
PROJECT_TYPE_MAGENTO=2
PROJECT_TYPE_NODE=3
BOOL_TRUE=true
BOOL_FALSE=false


########################################################################################################################
### OPTION KEYS ########################################################################################################
########################################################################################################################
OPTION_FOLDER="--folder"
OPTION_PROJECT_TYPE="--project-type"
OPTION_VARNISH="--varnish-host"
OPTION_VARNISH_PORT="--varnish-port"
OPTION_PROXY="--proxy-host"
OPTION_PROXY_PORT="--proxy-port"
OPTION_SERVER_NAME="--server-name"
OPTION_HTTPS="--https"



########################################################################################################################
### TEMPLATES ##########################################################################################################
########################################################################################################################
SSL_PORT="443 ssl http2"
SSL_PROXY="
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Port 443;
        proxy_set_header X-Secure on;
"
SSL_TEMPLATE="
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
"
REAL_IP_TEMPLATE="
    set_real_ip_from   127.0.0.1;
    real_ip_header     X-Forwarded-For;
    real_ip_recursive  on;
"
PHP_LOCATION_ROOT_TEMPLATE="
    location / {
        try_files \$uri \$uri/ /index.php\$is_args\$args;
    }
"
PHP_LOCATION_TEMPLATE="
    location ~ \.php\$ {
        try_files \$uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)\$;
        fastcgi_pass backend-server;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param PATH_INFO \$fastcgi_path_info;
    }
"
HT_LOCATION_TEMPLATE="
    location ~ /\.ht {
        deny all;
    }
"
PHP_BE_TEMPLATE="
upstream backend-server {
    server unix:/sock/docker.sock;
}
"
## S1   Listen port
## S2   Server name
## S3   Root folder
## S4   Real Ip config
## S5   SSL config
## S6   Include
MAGENTO_SERVER_TEMPLATE="
server {
    listen %s;
    server_name %s;

    set \$MAGE_ROOT %s;
    %s%s
    %s
}
"
## S1   Listen port
## S2   Server name
## S3   Root folder
## S4   Real Ip config
## S5   SSL config
## S6   Include
PHP_SERVER_TEMPLATE="
server {
    listen %s;

    server_name %s;

    root %s;

    index index.php;
    %s%s
    ${PHP_LOCATION_ROOT_TEMPLATE}
    ${PHP_LOCATION_TEMPLATE}
    ${HT_LOCATION_TEMPLATE}
    %s
}
"
## S1   Listen port
## S2   Server name
## S3   SSL config
## S4   Proxy pass
## S5   SSL proxy
FORWARD_SERVER_TEMPLATE="
server {
    listen %s;

    server_name %s;
    %s
    location / {
        proxy_pass %s;
        proxy_set_header Host \$host;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        %s
        proxy_redirect off;
    }
}
"
AUTO_HTTPS_SERVER_TEMPLATE="
server {
    listen 80;

    return 301 https://\$host\$request_uri;
}
"


function help()
{
    printf "Usage: Init new vhost.
        vhost [<option>=<value> ...]

    Options:
        %-40srequired\t\t\tRoot folder. Default: %s
        %-40srequired\t\t\tUse https (%s / %s). Default: %s
        %-40srequired\t\t\tProject type (PHP: %s / Magento: %s / Node.js: %s)
        %-40soptional\t\t\tVarnish host (Empty is not use varnish)
        %-40soptional\t\t\tVarnish port. Default: %s
        %-40soptional\t\t\tProxy host (Empty is not forward proxy)
        %-40soptional\t\t\tProxy port
        %-40soptional\t\t\tServer name. Default: %s
        -h, --help%-38s\t\t\tDisplay this help message
    " "${OPTION_FOLDER}" "${ROOT_FOLDER}" "${OPTION_HTTPS}" "${BOOL_TRUE}" "${BOOL_FALSE}" "${HTTPS}" "${OPTION_PROJECT_TYPE}" "${PROJECT_TYPE_PHP}" "${PROJECT_TYPE_MAGENTO}" "${PROJECT_TYPE_NODE}" "${OPTION_VARNISH}" "${OPTION_VARNISH_PORT}" "${VARNISH_PORT}" "${OPTION_PROXY}" "${OPTION_PROXY_PORT}" "${OPTION_SERVER_NAME}" "${SERVER_NAME_DEFAULT}" " "
}

function checkProjectType()
{
    if [ "$1" -eq $PROJECT_TYPE_PHP ] || [ "$1" -eq $PROJECT_TYPE_MAGENTO ] || [ "$1" -eq $PROJECT_TYPE_NODE ]; then
        return
    else
        msgError "Project type is invalid value.\n" && help && exit
    fi
}

#
## $1 value
## $2 Field
#
function checkBoolean()
{
    if [ "$1" != "$BOOL_TRUE" ] || [ "$1" != "$BOOL_FALSE" ]; then
        return
    else
        msgError "$2 is invalid value.\n" && help && exit
    fi
}

#
## $1 KEY=VALUE
#
function mapVariable()
{
    local option
    local value

    option=$(echo "$1" | tr "=" " " | awk '{print $1}')
    value=$(echo "$1" | tr "=" " " | awk '{print $2}')

    case $option in
        "${OPTION_FOLDER}")
            FOLDER="$value"
            ;;
        "${OPTION_PROJECT_TYPE}")
            checkProjectType "$value"
            PROJECT_TYPE="$value"
            ;;
        "${OPTION_VARNISH}")
            VARNISH="$value"
            ;;
        "${OPTION_VARNISH_PORT}")
            VARNISH_PORT="$value"
            ;;
        "${OPTION_PROXY}")
            PROXY="$value"
            ;;
        "${OPTION_PROXY_PORT}")
            PROXY_PORT="$value"
            ;;
        "${OPTION_SERVER_NAME}")
            SERVER_NAME="$value"
            ;;
        "${OPTION_HTTPS}")
            lower=$(echo "$value" | tr '[:upper:]' '[:lower:]')
            checkBoolean "$lower" "HTTPS"
            HTTPS="$lower"
            ;;
        "--help")
            help && exit
            ;;
        "-h")
            help && exit
            ;;
        *)
            msgError "Option \`${option}\` doesn't exists\n" && help && exit
            ;;
    esac
}

function autoHttps() {
    echo "${AUTO_HTTPS_SERVER_TEMPLATE}" > /etc/nginx/conf.d/auto-https.conf
}

function phpBackend() {
    echo "${PHP_BE_TEMPLATE}" > /etc/nginx/conf.d/php.conf
}

##
### S1  template
### S2  Include
##
generatePhpDefault() {
    port=80
    ssl=""
    template="$1"

    if [ "$HTTPS" = "true" ]; then
        port="${SSL_PORT}"
        ssl="${SSL_TEMPLATE}"
    fi

    if [ -z "$template" ]; then
        template="${PHP_SERVER_TEMPLATE}"
    fi

    printf "${template}" "${port}" "${SERVER_NAME}" "${FOLDER}" "" "${ssl}" "$2" > "/etc/nginx/conf.d/${SERVER_NAME}.conf"
}

function generatePhpVarnishDefault() {
    template="$1"
    varnish="${VARNISH}:${VARNISH_PORT}"

    if [ -z "$template" ]; then
        template="${PHP_SERVER_TEMPLATE}"
    fi

    if [[ "$varnish" != "http"* ]]; then
        varnish="http://${varnish}"
    fi

    printf "${template}" "${VARNISH_BE_PORT}" "${SERVER_NAME}" "${FOLDER}" "${REAL_IP_TEMPLATE}" "" > "/etc/nginx/conf.d/${SERVER_NAME}.conf"

    if [ "$HTTPS" = "$BOOL_TRUE" ]; then
        printf "${FORWARD_SERVER_TEMPLATE}" "${SSL_PORT}" "${SERVER_NAME}" "${SSL_TEMPLATE}" "${varnish}" "${SSL_PROXY}" >> "/etc/nginx/conf.d/${SERVER_NAME}.conf"
    fi
}

function generatePhpServer() {
   generatePhpDefault "${PHP_SERVER_TEMPLATE}"
}

function generatePhpVarnishServer() {
    generatePhpVarnishDefault "${PHP_SERVER_TEMPLATE}"
}

function generateMagentoServer() {
    generatePhpDefault "${MAGENTO_SERVER_TEMPLATE}" "${MAGENTO_INCLUDE}"
}

function generateMagentoVarnishServer() {
    generatePhpVarnishDefault "${MAGENTO_SERVER_TEMPLATE}"
}

function generateForwardServer() {
    port=80
    ssl=""
    sslProxy=""
    proxy="${PROXY}:${PROXY_PORT}"

    if [ "$HTTPS" = "true" ]; then
        port="${SSL_PORT}"
        ssl="${SSL_TEMPLATE}"
        sslProxy="${SSL_PROXY}"
    fi

    if [[ "$proxy" != "http"* ]]; then
        proxy="http://${proxy}"
    fi

    printf "${FORWARD_SERVER_TEMPLATE}" "${SSL_PORT}" "${SERVER_NAME}" "${ssl}" "${proxy}" "${sslProxy}" > "/etc/nginx/conf.d/${SERVER_NAME}.conf"
}

for item in "$@"
do
    mapVariable "$item"
done

if [ -z "$FOLDER" ]; then
    FOLDER="${ROOT_FOLDER}"
fi

if [ -z "$SERVER_NAME" ]; then
    SERVER_NAME="${SERVER_NAME_DEFAULT}"
fi

if [ -z "$PROJECT_TYPE" ]; then
    msgError "Project type is required.\n" && help && exit
fi

if [ "$HTTPS" = "$BOOL_TRUE" ]; then
    create-ssl-key
fi

case $PROJECT_TYPE in
    "${PROJECT_TYPE_PHP}")
        if [ -z "$VARNISH" ]; then
            generatePhpServer
        else
            generatePhpVarnishServer
        fi
        ;;
    "${PROJECT_TYPE_MAGENTO}")
        if [ -f "${FOLDER}/nginx.conf.sample" ]; then
            MAGENTO_INCLUDE="${FOLDER}/nginx.conf.sample"
        fi
        if [ -z "$VARNISH" ]; then
            generateMagentoServer
        else
            generateMagentoVarnishServer
        fi
        ;;
    "${PROJECT_TYPE_NODE}")
        generateForwardServer
        ;;
    *)
        msgError "Project type is invalid value.\n" && help && exit
esac


